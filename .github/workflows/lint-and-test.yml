name: lint-and-test

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

jobs:
  golangci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: 1.19

      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - name: golangci-lint
        uses: golangci/golangci-lint-action@0ad9a0988b3973e851ab0a07adf248ec2e100376 # v3.3.1
        with:
          version: v1.50.1
          args: "--timeout=10m"

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false

      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: 1.19
          cache: true
          cache-dependency-path: go.sum

      - name: install jsonnet-bundler
        run: |
          go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest

      - name: run tests
        run: |
          go test -v ./...

  generate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - golangci
      - test
    outputs:
      entries: ${{ steps.load-managed-cfg.outputs.entries }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0

      - uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f # v3.3.1
        with:
          go-version: 1.19

      - name: run libgenerator with stored config
        run: |
          go run ./cmd/libgenerator \
            gen --out "$(pwd)/generator-out" --config "$(pwd)/cfg/managed.json" --loglevel debug

      - name: create artifact
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # v3.1.1
        with:
          name: generator-out
          path: generator-out/

      # Set the contents of cfg/managed.json as a github output so that we can run a matrix job where a GitHub Action
      # job runs for each entry in the config.
      - id: load-managed-cfg
        run: echo entries="$(cat "$(pwd)/cfg/managed.json" | jq -Mc .)" >> "$GITHUB_OUTPUT"

  copy:
    if: github.event_name == 'pull_request'
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        entry: ${{ fromJSON(needs.generate.outputs.entries) }}
    steps:
      - run: echo "${{ matrix.entry.repo }}"
